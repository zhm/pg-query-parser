{"version":3,"sources":["../src/deparser.js"],"names":["keys","compact","o","filter","p","toString","length","fail","type","node","Error","JSON","stringify","parens","string","indent","text","count","Deparser","deparse","query","deparseQuery","constructor","tree","map","join","deparseNodes","nodes","list","separator","quote","value","isArray","escape","literal","replace","convertTypeName","typeName","size","names","args","name","catalog","mods","String","str","res","item","context","isNumber","values","output","kind","lexpr","push","schema","operator","rexpr","op","FuncCall","Null","aliasname","colnames","elements","val","lidx","uidx","arg","i","indirection","subnode","A_Star","prefix","substring","boolop","tests","booltesttype","defresult","collname","colname","raw_default","constraints","fields","field","ctename","aliascolnames","ctequery","params","agg_star","funcname","order","withinGroup","agg_within_group","agg_order","call","agg_distinct","func_variadic","agg_filter","over","content","ival","rel","larg","isNatural","jointype","quals","usingClause","rarg","JoinExpr","alias","using","wrapped","strengths","strength","lockedRels","nulltesttype","number","lateral","funcs","functions","funcCall","calls","is_rowsfrom","ordinality","coldeflist","defList","subquery","relation","method","repeatable","inhOpt","relpersistence","schemaname","relname","row_format","withClause","valuesLists","sets","all","distinctClause","clause","e","targetList","intoClause","fromClause","whereClause","lists","v","groupClause","havingClause","windowClause","windows","w","window","WindowDef","sortClause","limitCount","limitOffset","lockingClause","forEach","sortby_dir","useOp","sortby_nulls","subLinkType","subselect","testexpr","operName","last","deparseInterval","setof","typmods","arrayBounds","expr","result","empty","partitionClause","orderClause","frameOptions","deparseFrameOptions","refname","startOffset","endOffset","windowParts","useParens","partition","orders","recursive","ctes","options","refName","FRAMEOPTION_NONDEFAULT","FRAMEOPTION_RANGE","FRAMEOPTION_ROWS","FRAMEOPTION_BETWEEN","FRAMEOPTION_START_UNBOUNDED_PRECEDING","FRAMEOPTION_END_UNBOUNDED_PRECEDING","FRAMEOPTION_START_UNBOUNDED_FOLLOWING","FRAMEOPTION_END_UNBOUNDED_FOLLOWING","FRAMEOPTION_START_CURRENT_ROW","FRAMEOPTION_END_CURRENT_ROW","FRAMEOPTION_START_VALUE_PRECEDING","FRAMEOPTION_END_VALUE_PRECEDING","FRAMEOPTION_START_VALUE_FOLLOWING","FRAMEOPTION_END_VALUE_FOLLOWING","between","intervals","interval","A_Const","Integer","part","mask","MASKS","BITS","invert","INTERVALS","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","INTERVAL_FULL_RANGE"],"mappings":"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","file":"deparser.js","sourcesContent":["import _ from 'lodash';\r\nimport { format } from 'util';\r\n\r\nconst { keys } = _;\r\n\r\nconst compact = o => {\r\n  return _.filter(_.compact(o), (p) => {\r\n    if (p == null) {\r\n      return false;\r\n    }\r\n\r\n    return p.toString().length;\r\n  });\r\n};\r\n\r\nconst fail = (type, node) => {\r\n  throw new Error(format('Unhandled %s node: %s', type, JSON.stringify(node)));\r\n};\r\n\r\nconst parens = (string) => {\r\n  return '(' + string + ')';\r\n};\r\n\r\nconst indent = (text, count = 1) => text;\r\n\r\nexport default class Deparser {\r\n  static deparse(query) {\r\n    return new Deparser(query).deparseQuery();\r\n  }\r\n\r\n  constructor(tree) {\r\n    this.tree = tree;\r\n  }\r\n\r\n  deparseQuery() {\r\n    return (this.tree.map(node => this.deparse(node))).join('\\n\\n');\r\n  }\r\n\r\n  deparseNodes(nodes) {\r\n    return nodes.map(node => this.deparse(node));\r\n  }\r\n\r\n  list(nodes, separator = ', ') {\r\n    if (!nodes) {\r\n      return '';\r\n    }\r\n\r\n    return this.deparseNodes(nodes).join(separator);\r\n  }\r\n\r\n  quote(value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (_.isArray(value)) {\r\n      return value.map(o => this.quote(o));\r\n    }\r\n\r\n    return '\"' + value + '\"';\r\n  }\r\n\r\n  // SELECT encode(E'''123\\\\000\\\\001', 'base64')\r\n  escape(literal) {\r\n    return \"'\" + literal.replace(/'/g, \"''\") + \"'\";\r\n  }\r\n\r\n  convertTypeName(typeName, size) {\r\n    switch (typeName) {\r\n      case 'bpchar':\r\n        if (size != null) {\r\n          return 'char';\r\n        }\r\n        // return `pg_catalog.bpchar` below so that the following is symmetric\r\n        // SELECT char 'c' = char 'c' AS true\r\n        return 'pg_catalog.bpchar';\r\n      case 'varchar':\r\n        return 'varchar';\r\n      case 'numeric':\r\n        return 'numeric';\r\n      case 'bool':\r\n        return 'boolean';\r\n      case 'int2':\r\n        return 'smallint';\r\n      case 'int4':\r\n        return 'int';\r\n      case 'int8':\r\n        return 'bigint';\r\n      case 'real': case 'float4':\r\n        return 'real';\r\n      case 'float8':\r\n        return 'pg_catalog.float8';\r\n      case 'text':\r\n        // SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True\r\n        return 'pg_catalog.text';\r\n      case 'date':\r\n        return 'pg_catalog.date';\r\n      case 'time':\r\n        return 'time';\r\n      case 'timetz':\r\n        return 'pg_catalog.timetz';\r\n      case 'timestamp':\r\n        return 'timestamp';\r\n      case 'timestamptz':\r\n        return 'pg_catalog.timestamptz';\r\n      case 'interval':\r\n        return 'interval';\r\n      case 'bit':\r\n        return 'bit';\r\n      default:\r\n        throw new Error(format('Unhandled data type: %s', typeName));\r\n    }\r\n  }\r\n\r\n  type(names, args) {\r\n    const [ catalog, type ] = names.map(name => this.deparse(name));\r\n\r\n    const mods = (name, size) => {\r\n      if (size != null) {\r\n        return name + '(' + size + ')';\r\n      }\r\n\r\n      return name;\r\n    };\r\n\r\n    // handle the special \"char\" (in quotes) type\r\n    if (names[0].String.str === 'char') {\r\n      names[0].String.str = '\"char\"';\r\n    }\r\n\r\n    if (catalog !== 'pg_catalog') {\r\n      return mods(this.list(names, '.'), args);\r\n    }\r\n\r\n    const res = this.convertTypeName(type, args);\r\n\r\n    return mods(res, args);\r\n  }\r\n\r\n  deparse(item, context) {\r\n    if (item == null) {\r\n      return null;\r\n    }\r\n\r\n    if (_.isNumber(item)) {\r\n      return item;\r\n    }\r\n\r\n    const type = keys(item)[0];\r\n    const node = _.values(item)[0];\r\n\r\n    if (this[type] == null) {\r\n      throw new Error(type + ' is not implemented');\r\n    }\r\n\r\n    return this[type](node, context);\r\n  }\r\n\r\n  ['A_Expr'](node, context) {\r\n    const output = [];\r\n\r\n    switch (node.kind) {\r\n      case 0: // AEXPR_OP\r\n        if (node.lexpr) {\r\n          output.push(parens(this.deparse(node.lexpr)));\r\n        }\r\n\r\n        if (node.name.length > 1) {\r\n          const schema = this.deparse(node.name[0]);\r\n          const operator = this.deparse(node.name[1]);\r\n          output.push(`OPERATOR(${schema}.${operator})`);\r\n        } else {\r\n          output.push(this.deparse(node.name[0]));\r\n        }\r\n\r\n        if (node.rexpr) {\r\n          output.push(parens(this.deparse(node.rexpr)));\r\n        }\r\n\r\n        if (output.length === 2) {\r\n          return parens(output.join(''));\r\n        }\r\n\r\n        return parens(output.join(' '));\r\n\r\n      case 1: // AEXPR_OP_ANY\r\n        output.push(this.deparse(node.lexpr));\r\n        output.push(format('ANY (%s)', this.deparse(node.rexpr)));\r\n        return output.join(` ${this.deparse(node.name[0])} `);\r\n\r\n      case 2: // AEXPR_OP_ALL\r\n        output.push(this.deparse(node.lexpr));\r\n        output.push(format('ALL (%s)', this.deparse(node.rexpr)));\r\n        return output.join(` ${this.deparse(node.name[0])} `);\r\n\r\n      case 3: // AEXPR_DISTINCT\r\n        return format('%s IS DISTINCT FROM %s', this.deparse(node.lexpr), this.deparse(node.rexpr));\r\n\r\n      case 4: // AEXPR_NULLIF\r\n        return format('NULLIF(%s, %s)', this.deparse(node.lexpr), this.deparse(node.rexpr));\r\n\r\n      case 5: { // AEXPR_OF\r\n        const op = node.name[0].String.str === '=' ? 'IS OF' : 'IS NOT OF';\r\n        return format('%s %s (%s)', this.deparse(node.lexpr), op, this.list(node.rexpr));\r\n      }\r\n\r\n      case 6: { // AEXPR_IN\r\n        const operator = node.name[0].String.str === '=' ? 'IN' : 'NOT IN';\r\n\r\n        return format('%s %s (%s)', this.deparse(node.lexpr), operator, this.list(node.rexpr));\r\n      }\r\n\r\n      case 7: // AEXPR_LIKE\r\n        output.push(this.deparse(node.lexpr));\r\n\r\n        if (node.name[0].String.str === '!~~') {\r\n          output.push(format('NOT LIKE (%s)', this.deparse(node.rexpr)));\r\n        } else {\r\n          output.push(format('LIKE (%s)', this.deparse(node.rexpr)));\r\n        }\r\n\r\n        return output.join(' ');\r\n\r\n      case 8: // AEXPR_ILIKE\r\n        output.push(this.deparse(node.lexpr));\r\n\r\n        if (node.name[0].String.str === '!~~*') {\r\n          output.push(format('NOT ILIKE (%s)', this.deparse(node.rexpr)));\r\n        } else {\r\n          output.push(format('ILIKE (%s)', this.deparse(node.rexpr)));\r\n        }\r\n\r\n        return output.join(' ');\r\n\r\n      case 9: // AEXPR_SIMILAR\r\n        // SIMILAR TO emits a similar_escape FuncCall node with the first argument\r\n        output.push(this.deparse(node.lexpr));\r\n\r\n        if (this.deparse(node.rexpr.FuncCall.args[1].Null)) {\r\n          output.push(format('SIMILAR TO %s', this.deparse(node.rexpr.FuncCall.args[0])));\r\n        } else {\r\n          output.push(format('SIMILAR TO %s ESCAPE %s',\r\n                             this.deparse(node.rexpr.FuncCall.args[0]),\r\n                             this.deparse(node.rexpr.FuncCall.args[1])));\r\n        }\r\n\r\n        return output.join(' ');\r\n\r\n      case 10: // AEXPR_BETWEEN TODO(zhm) untested\r\n        output.push(this.deparse(node.lexpr));\r\n        output.push(format('BETWEEN %s AND %s', this.deparse(node.rexpr[0]), this.deparse(node.rexpr[1])));\r\n        return output.join(' ');\r\n\r\n      case 11: // AEXPR_NOT_BETWEEN TODO(zhm) untested\r\n        output.push(this.deparse(node.lexpr));\r\n        output.push(format('NOT BETWEEN %s AND %s', this.deparse(node.rexpr[0]), this.deparse(node.rexpr[1])));\r\n        return output.join(' ');\r\n\r\n      default:\r\n        return fail('A_Expr', node);\r\n    }\r\n  }\r\n\r\n  ['Alias'](node, context) {\r\n    const name = node.aliasname;\r\n\r\n    const output = [ 'AS' ];\r\n\r\n    if (node.colnames) {\r\n      output.push(name + parens(this.list(node.colnames)));\r\n    } else {\r\n      output.push(this.quote(name));\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['A_ArrayExpr'](node) {\r\n    return format('ARRAY[%s]', this.list(node.elements));\r\n  }\r\n\r\n  ['A_Const'](node, context) {\r\n    if (node.val.String) {\r\n      return this.escape(this.deparse(node.val));\r\n    }\r\n\r\n    return this.deparse(node.val);\r\n  }\r\n\r\n  ['A_Indices'](node) {\r\n    if (node.lidx) {\r\n      return format('[%s:%s]', this.deparse(node.lidx), this.deparse(node.uidx));\r\n    }\r\n\r\n    return format('[%s]', this.deparse(node.uidx));\r\n  }\r\n\r\n  ['A_Indirection'](node) {\r\n    const output = [ `(${this.deparse(node.arg)})` ];\r\n\r\n    // TODO(zhm) figure out the actual rules for when a '.' is needed\r\n    //\r\n    // select a.b[0] from a;\r\n    // select (select row(1)).*\r\n    // select c2[2].f2 from comptable\r\n    // select c2.a[2].f2[1].f3[0].a1 from comptable\r\n\r\n    for (let i = 0; i < node.indirection.length; i++) {\r\n      const subnode = node.indirection[i];\r\n\r\n      if (subnode.String || subnode.A_Star) {\r\n        const value = subnode.A_Star ? '*' : this.quote(subnode.String.str);\r\n\r\n        output.push(`.${value}`);\r\n      } else {\r\n        output.push(this.deparse(subnode));\r\n      }\r\n    }\r\n\r\n    return output.join('');\r\n  }\r\n\r\n  ['A_Star'](node, context) {\r\n    return '*';\r\n  }\r\n\r\n  ['BitString'](node) {\r\n    const prefix = node.str[0];\r\n    return `${prefix}'${node.str.substring(1)}'`;\r\n  }\r\n\r\n  ['BoolExpr'](node) {\r\n    switch (node.boolop) {\r\n      case 0:\r\n        return parens(this.list(node.args, ' AND '));\r\n      case 1:\r\n        return parens(this.list(node.args, ' OR '));\r\n      case 2:\r\n        return format('NOT (%s)', this.deparse(node.args[0]));\r\n      default:\r\n        return fail('BoolExpr', node);\r\n    }\r\n  }\r\n\r\n  ['BooleanTest'](node) {\r\n    const output = [];\r\n\r\n    output.push(this.deparse(node.arg));\r\n\r\n    const tests = [\r\n      'IS TRUE',\r\n      'IS NOT TRUE',\r\n      'IS FALSE',\r\n      'IS NOT FALSE',\r\n      'IS UNKNOWN',\r\n      'IS NOT UNKNOWN'\r\n    ];\r\n\r\n    output.push(tests[node.booltesttype]);\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['CaseExpr'](node) {\r\n    const output = [ 'CASE' ];\r\n\r\n    if (node.arg) {\r\n      output.push(this.deparse(node.arg));\r\n    }\r\n\r\n    for (let i = 0; i < node.args.length; i++) {\r\n      output.push(this.deparse(node.args[i]));\r\n    }\r\n\r\n    if (node.defresult) {\r\n      output.push('ELSE');\r\n      output.push(this.deparse(node.defresult));\r\n    }\r\n\r\n    output.push('END');\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['CoalesceExpr'](node) {\r\n    return format('COALESCE(%s)', this.list(node.args));\r\n  }\r\n\r\n  ['CollateClause'](node) {\r\n    const output = [];\r\n\r\n    if (node.arg) {\r\n      output.push(this.deparse(node.arg));\r\n    }\r\n\r\n    output.push('COLLATE');\r\n\r\n    if (node.collname) {\r\n      output.push(this.quote(this.deparseNodes(node.collname)));\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['ColumnDef'](node) {\r\n    const output = [ this.quote(node.colname) ];\r\n\r\n    output.push(this.deparse(node.typeName));\r\n\r\n    if (node.raw_default) {\r\n      output.push('USING');\r\n      output.push(this.deparse(node.raw_default));\r\n    }\r\n\r\n    if (node.constraints) {\r\n      output.push(this.list(node.constraints, ' '));\r\n    }\r\n\r\n    return _.compact(output).join(' ');\r\n  }\r\n\r\n  ['ColumnRef'](node) {\r\n    const fields = node.fields.map(field => {\r\n      if (field.String) {\r\n        return this.quote(this.deparse(field));\r\n      }\r\n\r\n      return this.deparse(field);\r\n    });\r\n\r\n    return fields.join('.');\r\n  }\r\n\r\n  ['CommonTableExpr'](node) {\r\n    const output = [];\r\n\r\n    output.push(node.ctename);\r\n\r\n    if (node.aliascolnames) {\r\n      output.push(format('(%s)', this.quote(this.deparseNodes(node.aliascolnames))));\r\n    }\r\n\r\n    output.push(format('AS (%s)', this.deparse(node.ctequery)));\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['Float'](node) {\r\n    // wrap negative numbers in parens, SELECT (-2147483648)::int4 * (-1)::int4\r\n    if (node.str[0] === '-') {\r\n      return `(${node.str})`;\r\n    }\r\n\r\n    return node.str;\r\n  }\r\n\r\n  ['FuncCall'](node, context) {\r\n    const output = [];\r\n\r\n    let params = [];\r\n\r\n    if (node.args) {\r\n      params = node.args.map(item => {\r\n        return this.deparse(item);\r\n      });\r\n    }\r\n\r\n    // COUNT(*)\r\n    if (node.agg_star) {\r\n      params.push('*');\r\n    }\r\n\r\n    const name = this.list(node.funcname, '.');\r\n\r\n    const order = [];\r\n\r\n    const withinGroup = node.agg_within_group;\r\n\r\n    if (node.agg_order) {\r\n      order.push('ORDER BY');\r\n      order.push(this.list(node.agg_order, ', '));\r\n    }\r\n\r\n    const call = [];\r\n\r\n    call.push(name + '(');\r\n\r\n    if (node.agg_distinct) {\r\n      call.push('DISTINCT ');\r\n    }\r\n\r\n    // prepend variadic before the last parameter\r\n    // SELECT CONCAT('|', VARIADIC ARRAY['1','2','3'])\r\n    if (node.func_variadic) {\r\n      params[params.length - 1] = 'VARIADIC ' + params[params.length - 1];\r\n    }\r\n\r\n    call.push(params.join(', '));\r\n\r\n    if (order.length && !withinGroup) {\r\n      call.push(' ');\r\n      call.push(order.join(' '));\r\n    }\r\n\r\n    call.push(')');\r\n\r\n    output.push(compact(call).join(''));\r\n\r\n    if (order.length && withinGroup) {\r\n      output.push('WITHIN GROUP');\r\n      output.push(parens(order.join(' ')));\r\n    }\r\n\r\n    if (node.agg_filter != null) {\r\n      output.push(format('FILTER (WHERE %s)', this.deparse(node.agg_filter)));\r\n    }\r\n\r\n    if (node.over != null) {\r\n      output.push(format('OVER %s', this.deparse(node.over)));\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['GroupingFunc'](node) {\r\n    return 'GROUPING(' + this.list(node.args) + ')';\r\n  }\r\n\r\n  ['GroupingSet'](node) {\r\n    switch (node.kind) {\r\n      case 0: // GROUPING_SET_EMPTY\r\n        return '()';\r\n\r\n      case 1: // GROUPING_SET_SIMPLE\r\n        return fail('GroupingSet', node);\r\n\r\n      case 2: // GROUPING_SET_ROLLUP\r\n        return 'ROLLUP (' + this.list(node.content) + ')';\r\n\r\n      case 3: // GROUPING_SET_CUBE\r\n        return 'CUBE (' + this.list(node.content) + ')';\r\n\r\n      case 4: // GROUPING_SET_SETS\r\n        return 'GROUPING SETS (' + this.list(node.content) + ')';\r\n\r\n      default:\r\n        return fail('GroupingSet', node);\r\n    }\r\n  }\r\n\r\n  ['Integer'](node) {\r\n    if (node.ival < 0) {\r\n      return `(${node.ival})`;\r\n    }\r\n\r\n    return node.ival.toString();\r\n  }\r\n\r\n  ['IntoClause'](node) {\r\n    return this.deparse(node.rel);\r\n  }\r\n\r\n  ['JoinExpr'](node, context) {\r\n    const output = [];\r\n\r\n    output.push(this.deparse(node.larg));\r\n\r\n    if (node.isNatural) {\r\n      output.push('NATURAL');\r\n    }\r\n\r\n    let join = null;\r\n\r\n    switch (true) {\r\n      case node.jointype === 0 && (node.quals != null):\r\n        join = 'INNER JOIN';\r\n        break;\r\n\r\n      case node.jointype === 0 && !node.isNatural && !(node.quals != null) && !(node.usingClause != null):\r\n        join = 'CROSS JOIN';\r\n        break;\r\n\r\n      case node.jointype === 0:\r\n        join = 'JOIN';\r\n        break;\r\n\r\n      case node.jointype === 1:\r\n        join = 'LEFT OUTER JOIN';\r\n        break;\r\n\r\n      case node.jointype === 2:\r\n        join = 'FULL OUTER JOIN';\r\n        break;\r\n\r\n      case node.jointype === 3:\r\n        join = 'RIGHT OUTER JOIN';\r\n        break;\r\n\r\n      default:\r\n        fail('JoinExpr', node);\r\n        break;\r\n    }\r\n\r\n    output.push(join);\r\n\r\n    if (node.rarg) {\r\n      // wrap nested join expressions in parens to make the following symmetric:\r\n      // select * from int8_tbl x cross join (int4_tbl x cross join lateral (select x.f1) ss)\r\n      if ((node.rarg.JoinExpr != null) && !(node.rarg.JoinExpr.alias != null)) {\r\n        output.push(`(${this.deparse(node.rarg)})`);\r\n      } else {\r\n        output.push(this.deparse(node.rarg));\r\n      }\r\n    }\r\n\r\n    if (node.quals) {\r\n      output.push(`ON ${this.deparse(node.quals)}`);\r\n    }\r\n\r\n    if (node.usingClause) {\r\n      const using = this.quote(this.deparseNodes(node.usingClause)).join(', ');\r\n\r\n      output.push(`USING (${using})`);\r\n    }\r\n\r\n    const wrapped =\r\n      (node.rarg.JoinExpr != null) || node.alias ? '(' + output.join(' ') + ')'\r\n                                                 : output.join(' ');\r\n\r\n    if (node.alias) {\r\n      return wrapped + ' ' + this.deparse(node.alias);\r\n    }\r\n\r\n    return wrapped;\r\n  }\r\n\r\n  ['LockingClause'](node) {\r\n    const strengths = [\r\n      'NONE', // LCS_NONE\r\n      'FOR KEY SHARE',\r\n      'FOR SHARE',\r\n      'FOR NO KEY UPDATE',\r\n      'FOR UPDATE'\r\n    ];\r\n\r\n    const output = [];\r\n\r\n    output.push(strengths[node.strength]);\r\n\r\n    if (node.lockedRels) {\r\n      output.push('OF');\r\n      output.push(this.list(node.lockedRels));\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['MinMaxExpr'](node) {\r\n    const output = [];\r\n\r\n    if (node.op === 0) {\r\n      output.push('GREATEST');\r\n    } else {\r\n      output.push('LEAST');\r\n    }\r\n\r\n    output.push(parens(this.list(node.args)));\r\n\r\n    return output.join('');\r\n  }\r\n\r\n  ['NamedArgExpr'](node) {\r\n    const output = [];\r\n\r\n    output.push(node.name);\r\n    output.push(':=');\r\n    output.push(this.deparse(node.arg));\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['Null'](node) {\r\n    return 'NULL';\r\n  }\r\n\r\n  ['NullTest'](node) {\r\n    const output = [ this.deparse(node.arg) ];\r\n\r\n    if (node.nulltesttype === 0) {\r\n      output.push('IS NULL');\r\n    } else if (node.nulltesttype === 1) {\r\n      output.push('IS NOT NULL');\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['ParamRef'](node) {\r\n    if (node.number >= 0) {\r\n      return [ '$', node.number ].join('');\r\n    }\r\n    return '?';\r\n  }\r\n\r\n  ['RangeFunction'](node) {\r\n    const output = [];\r\n\r\n    if (node.lateral) {\r\n      output.push('LATERAL');\r\n    }\r\n\r\n    const funcs = [];\r\n\r\n    for (let i = 0; i < node.functions.length; i++) {\r\n      const funcCall = node.functions[i];\r\n      const call = [ this.deparse(funcCall[0]) ];\r\n\r\n      if (funcCall[1] && funcCall[1].length) {\r\n        call.push(format('AS (%s)', this.list(funcCall[1])));\r\n      }\r\n\r\n      funcs.push(call.join(' '));\r\n    }\r\n\r\n    const calls = funcs.join(', ');\r\n\r\n    if (node.is_rowsfrom) {\r\n      output.push(`ROWS FROM (${calls})`);\r\n    } else {\r\n      output.push(calls);\r\n    }\r\n\r\n    if (node.ordinality) {\r\n      output.push('WITH ORDINALITY');\r\n    }\r\n\r\n    if (node.alias) {\r\n      output.push(this.deparse(node.alias));\r\n    }\r\n\r\n    if (node.coldeflist) {\r\n      const defList = this.list(node.coldeflist);\r\n\r\n      if (!node.alias) {\r\n        output.push(` AS (${defList})`);\r\n      } else {\r\n        output.push(`(${defList})`);\r\n      }\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['RangeSubselect'](node, context) {\r\n    let output = '';\r\n\r\n    if (node.lateral) {\r\n      output += 'LATERAL ';\r\n    }\r\n\r\n    output += parens(this.deparse(node.subquery));\r\n\r\n    if (node.alias) {\r\n      return output + ' ' + this.deparse(node.alias);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  ['RangeTableSample'](node) {\r\n    const output = [];\r\n\r\n    output.push(this.deparse(node.relation));\r\n    output.push('TABLESAMPLE');\r\n    output.push(this.deparse(node.method[0]));\r\n\r\n    if (node.args) {\r\n      output.push(parens(this.list(node.args)));\r\n    }\r\n\r\n    if (node.repeatable) {\r\n      output.push('REPEATABLE(' + this.deparse(node.repeatable) + ')');\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['RangeVar'](node, context) {\r\n    const output = [];\r\n\r\n    if (node.inhOpt === 0) {\r\n      output.push('ONLY');\r\n    }\r\n\r\n    if (node.relpersistence === 'u') {\r\n      output.push('UNLOGGED');\r\n    }\r\n\r\n    if (node.relpersistence === 't') {\r\n      output.push('TEMPORARY');\r\n    }\r\n\r\n    if (node.schemaname != null) {\r\n      output.push(this.quote(node.schemaname));\r\n      output.push('.');\r\n    }\r\n\r\n    output.push(this.quote(node.relname));\r\n\r\n    if (node.alias) {\r\n      output.push(this.deparse(node.alias));\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['ResTarget'](node, context) {\r\n    if (context === 'select') {\r\n      return compact([ this.deparse(node.val), this.quote(node.name) ]).join(' AS ');\r\n    } else if (context === 'update') {\r\n      return compact([ node.name, this.deparse(node.val) ]).join(' = ');\r\n    } else if (!(node.val != null)) {\r\n      return this.quote(node.name);\r\n    }\r\n\r\n    return fail('ResTarget', node);\r\n  }\r\n\r\n  ['RowExpr'](node) {\r\n    if (node.row_format === 2) {\r\n      return parens(this.list(node.args));\r\n    }\r\n\r\n    return format('ROW(%s)', this.list(node.args));\r\n  }\r\n\r\n  ['SelectStmt'](node, context) {\r\n    const output = [];\r\n\r\n    if (node.withClause) {\r\n      output.push(this.deparse(node.withClause));\r\n    }\r\n\r\n    if (node.op === 0) {\r\n      // VALUES select's don't get SELECT\r\n      if (node.valuesLists == null) {\r\n        output.push('SELECT');\r\n      }\r\n    } else {\r\n      output.push(parens(this.deparse(node.larg)));\r\n\r\n      const sets = [\r\n        'NONE',\r\n        'UNION',\r\n        'INTERSECT',\r\n        'EXCEPT'\r\n      ];\r\n\r\n      output.push(sets[node.op]);\r\n\r\n      if (node.all) {\r\n        output.push('ALL');\r\n      }\r\n\r\n      output.push(parens(this.deparse(node.rarg)));\r\n    }\r\n\r\n    if (node.distinctClause) {\r\n      if (node.distinctClause[0] != null) {\r\n        output.push('DISTINCT ON');\r\n\r\n        const clause = (node.distinctClause.map(e => this.deparse(e, 'select'))).join(',\\n');\r\n\r\n        output.push(`(${clause})`);\r\n      } else {\r\n        output.push('DISTINCT');\r\n      }\r\n    }\r\n\r\n    if (node.targetList) {\r\n      output.push(indent((node.targetList.map(e => this.deparse(e, 'select'))).join(',\\n')));\r\n    }\r\n\r\n    if (node.intoClause) {\r\n      output.push('INTO');\r\n      output.push(indent(this.deparse(node.intoClause)));\r\n    }\r\n\r\n    if (node.fromClause) {\r\n      output.push('FROM');\r\n      output.push(indent((node.fromClause.map(e => this.deparse(e, 'from'))).join(',\\n')));\r\n    }\r\n\r\n    if (node.whereClause) {\r\n      output.push('WHERE');\r\n      output.push(indent(this.deparse(node.whereClause)));\r\n    }\r\n\r\n    if (node.valuesLists) {\r\n      output.push('VALUES');\r\n\r\n      const lists = node.valuesLists.map(list => {\r\n        return `(${(list.map(v => this.deparse(v))).join(', ')})`;\r\n      });\r\n\r\n      output.push(lists.join(', '));\r\n    }\r\n\r\n    if (node.groupClause) {\r\n      output.push('GROUP BY');\r\n      output.push(indent((node.groupClause.map(e => this.deparse(e, 'group'))).join(',\\n')));\r\n    }\r\n\r\n    if (node.havingClause) {\r\n      output.push('HAVING');\r\n      output.push(indent(this.deparse(node.havingClause)));\r\n    }\r\n\r\n    if (node.windowClause) {\r\n      output.push('WINDOW');\r\n\r\n      const windows = [];\r\n\r\n      for (let i = 0; i < node.windowClause.length; i++) {\r\n        const w = node.windowClause[i];\r\n        const window = [];\r\n\r\n        if (w.WindowDef.name) {\r\n          window.push(this.quote(w.WindowDef.name) + ' AS');\r\n        }\r\n\r\n        window.push(parens(this.deparse(w, 'window')));\r\n\r\n        windows.push(window.join(' '));\r\n      }\r\n\r\n      output.push(windows.join(', '));\r\n    }\r\n\r\n    if (node.sortClause) {\r\n      output.push('ORDER BY');\r\n      output.push(indent((node.sortClause.map(e => this.deparse(e, 'sort'))).join(',\\n')));\r\n    }\r\n\r\n    if (node.limitCount) {\r\n      output.push('LIMIT');\r\n      output.push(indent(this.deparse(node.limitCount)));\r\n    }\r\n\r\n    if (node.limitOffset) {\r\n      output.push('OFFSET');\r\n      output.push(indent(this.deparse(node.limitOffset)));\r\n    }\r\n\r\n    if (node.lockingClause) {\r\n      node.lockingClause.forEach(item => {\r\n        return output.push(this.deparse(item));\r\n      });\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['SortBy'](node) {\r\n    const output = [];\r\n\r\n    output.push(this.deparse(node.node));\r\n\r\n    if (node.sortby_dir === 1) {\r\n      output.push('ASC');\r\n    }\r\n\r\n    if (node.sortby_dir === 2) {\r\n      output.push('DESC');\r\n    }\r\n\r\n    if (node.sortby_dir === 3) {\r\n      output.push(`USING ${this.deparseNodes(node.useOp)}`);\r\n    }\r\n\r\n    if (node.sortby_nulls === 1) {\r\n      output.push('NULLS FIRST');\r\n    }\r\n\r\n    if (node.sortby_nulls === 2) {\r\n      output.push('NULLS LAST');\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['String'](node) {\r\n    return node.str;\r\n  }\r\n\r\n  ['SubLink'](node) {\r\n    switch (true) {\r\n      case node.subLinkType === 0:\r\n        return format('EXISTS (%s)', this.deparse(node.subselect));\r\n      case node.subLinkType === 1:\r\n        return format('%s %s ALL (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\r\n      case node.subLinkType === 2 && !(node.operName != null):\r\n        return format('%s IN (%s)', this.deparse(node.testexpr), this.deparse(node.subselect));\r\n      case node.subLinkType === 2:\r\n        return format('%s %s ANY (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\r\n      case node.subLinkType === 3:\r\n        return format('%s %s (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\r\n      case node.subLinkType === 4:\r\n        return format('(%s)', this.deparse(node.subselect));\r\n      case node.subLinkType === 5:\r\n        // TODO(zhm) what is this?\r\n        return fail('SubLink', node);\r\n        // MULTIEXPR_SUBLINK\r\n        // format('(%s)', @deparse(node.subselect))\r\n      case node.subLinkType === 6:\r\n        return format('ARRAY (%s)', this.deparse(node.subselect));\r\n      default:\r\n        return fail('SubLink', node);\r\n    }\r\n  }\r\n\r\n  ['TypeCast'](node) {\r\n    return this.deparse(node.arg) + '::' + this.deparse(node.typeName);\r\n  }\r\n\r\n  ['TypeName'](node) {\r\n    if (_.last(node.names).String.str === 'interval') {\r\n      return this.deparseInterval(node);\r\n    }\r\n\r\n    const output = [];\r\n\r\n    if (node.setof) {\r\n      output.push('SETOF');\r\n    }\r\n\r\n    let args = null;\r\n\r\n    if (node.typmods != null) {\r\n      args = node.typmods.map(item => {\r\n        return this.deparse(item);\r\n      });\r\n    }\r\n\r\n    const type = [];\r\n\r\n    type.push(this.type(node.names, args && args.join(', ')));\r\n\r\n    if (node.arrayBounds != null) {\r\n      type.push('[]');\r\n    }\r\n\r\n    output.push(type.join(''));\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['CaseWhen'](node) {\r\n    const output = [ 'WHEN' ];\r\n\r\n    output.push(this.deparse(node.expr));\r\n    output.push('THEN');\r\n    output.push(this.deparse(node.result));\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  ['WindowDef'](node, context) {\r\n    const output = [];\r\n\r\n    if (context !== 'window') {\r\n      if (node.name) {\r\n        output.push(node.name);\r\n      }\r\n    }\r\n\r\n    const empty = (!(node.partitionClause != null) && !(node.orderClause != null));\r\n\r\n    const frameOptions = this.deparseFrameOptions(node.frameOptions, node.refname, node.startOffset, node.endOffset);\r\n\r\n    if (empty && context !== 'window' && !(node.name != null) && frameOptions.length === 0) {\r\n      return '()';\r\n    }\r\n\r\n    const windowParts = [];\r\n\r\n    let useParens = false;\r\n\r\n    if (node.partitionClause) {\r\n      const partition = [ 'PARTITION BY' ];\r\n\r\n      const clause = node.partitionClause.map(item => this.deparse(item));\r\n\r\n      partition.push(clause.join(', '));\r\n\r\n      windowParts.push(partition.join(' '));\r\n      useParens = true;\r\n    }\r\n\r\n    if (node.orderClause) {\r\n      windowParts.push('ORDER BY');\r\n\r\n      const orders = node.orderClause.map(item => {\r\n        return this.deparse(item);\r\n      });\r\n\r\n      windowParts.push(orders.join(', '));\r\n\r\n      useParens = true;\r\n    }\r\n\r\n    if (frameOptions.length) {\r\n      useParens = true;\r\n      windowParts.push(frameOptions);\r\n    }\r\n\r\n    if (useParens && context !== 'window') {\r\n      return output.join(' ') + ' (' + windowParts.join(' ') + ')';\r\n    }\r\n\r\n    return output.join(' ') + windowParts.join(' ');\r\n  }\r\n\r\n  ['WithClause'](node) {\r\n    const output = [ 'WITH' ];\r\n\r\n    if (node.recursive) {\r\n      output.push('RECURSIVE');\r\n    }\r\n\r\n    output.push(this.list(node.ctes));\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  deparseFrameOptions(options, refName, startOffset, endOffset) {\r\n    const FRAMEOPTION_NONDEFAULT = 0x00001; // any specified?\r\n    const FRAMEOPTION_RANGE = 0x00002; // RANGE behavior\r\n    const FRAMEOPTION_ROWS = 0x00004; // ROWS behavior\r\n    const FRAMEOPTION_BETWEEN = 0x00008; // BETWEEN given?\r\n    const FRAMEOPTION_START_UNBOUNDED_PRECEDING = 0x00010; // start is U. P.\r\n    const FRAMEOPTION_END_UNBOUNDED_PRECEDING = 0x00020; // (disallowed)\r\n    const FRAMEOPTION_START_UNBOUNDED_FOLLOWING = 0x00040; // (disallowed)\r\n    const FRAMEOPTION_END_UNBOUNDED_FOLLOWING = 0x00080; // end is U. F.\r\n    const FRAMEOPTION_START_CURRENT_ROW = 0x00100; // start is C. R.\r\n    const FRAMEOPTION_END_CURRENT_ROW = 0x00200; // end is C. R.\r\n    const FRAMEOPTION_START_VALUE_PRECEDING = 0x00400; // start is V. P.\r\n    const FRAMEOPTION_END_VALUE_PRECEDING = 0x00800; // end is V. P.\r\n    const FRAMEOPTION_START_VALUE_FOLLOWING = 0x01000; // start is V. F.\r\n    const FRAMEOPTION_END_VALUE_FOLLOWING = 0x02000; // end is V. F.\r\n\r\n    if (!(options & FRAMEOPTION_NONDEFAULT)) {\r\n      return '';\r\n    }\r\n\r\n    const output = [];\r\n\r\n    if (refName != null) {\r\n      output.push(refName);\r\n    }\r\n\r\n    if (options & FRAMEOPTION_RANGE) {\r\n      output.push('RANGE');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_ROWS) {\r\n      output.push('ROWS');\r\n    }\r\n\r\n    const between = options & FRAMEOPTION_BETWEEN;\r\n\r\n    if (between) {\r\n      output.push('BETWEEN');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_START_UNBOUNDED_PRECEDING) {\r\n      output.push('UNBOUNDED PRECEDING');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_START_UNBOUNDED_FOLLOWING) {\r\n      output.push('UNBOUNDED FOLLOWING');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_START_CURRENT_ROW) {\r\n      output.push('CURRENT ROW');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_START_VALUE_PRECEDING) {\r\n      output.push(this.deparse(startOffset) + ' PRECEDING');\r\n    }\r\n\r\n    if (options & FRAMEOPTION_START_VALUE_FOLLOWING) {\r\n      output.push(this.deparse(startOffset) + ' FOLLOWING');\r\n    }\r\n\r\n    if (between) {\r\n      output.push('AND');\r\n\r\n      if (options & FRAMEOPTION_END_UNBOUNDED_PRECEDING) {\r\n        output.push('UNBOUNDED PRECEDING');\r\n      }\r\n\r\n      if (options & FRAMEOPTION_END_UNBOUNDED_FOLLOWING) {\r\n        output.push('UNBOUNDED FOLLOWING');\r\n      }\r\n\r\n      if (options & FRAMEOPTION_END_CURRENT_ROW) {\r\n        output.push('CURRENT ROW');\r\n      }\r\n\r\n      if (options & FRAMEOPTION_END_VALUE_PRECEDING) {\r\n        output.push(this.deparse(endOffset) + ' PRECEDING');\r\n      }\r\n\r\n      if (options & FRAMEOPTION_END_VALUE_FOLLOWING) {\r\n        output.push(this.deparse(endOffset) + ' FOLLOWING');\r\n      }\r\n    }\r\n\r\n    return output.join(' ');\r\n  }\r\n\r\n  deparseInterval(node) {\r\n    const type = [ 'interval' ];\r\n\r\n    if (node.arrayBounds != null) {\r\n      type.push('[]');\r\n    }\r\n\r\n    if (node.typmods) {\r\n      const typmods = node.typmods.map(item => this.deparse(item));\r\n\r\n      let intervals = this.interval(typmods[0]);\r\n\r\n      // SELECT interval(0) '1 day 01:23:45.6789'\r\n      if (node.typmods[0] && node.typmods[0].A_Const && node.typmods[0].A_Const.val.Integer.ival === 32767 && node.typmods[1] && (node.typmods[1].A_Const != null)) {\r\n        intervals = [ `(${node.typmods[1].A_Const.val.Integer.ival})` ];\r\n      } else {\r\n        intervals = intervals.map(part => {\r\n          if (part === 'second' && typmods.length === 2) {\r\n            return 'second(' + _.last(typmods) + ')';\r\n          }\r\n\r\n          return part;\r\n        });\r\n      }\r\n\r\n      type.push(intervals.join(' to '));\r\n    }\r\n\r\n    return type.join(' ');\r\n  }\r\n\r\n  interval(mask) {\r\n    // ported from https://github.com/lfittl/pg_query/blob/master/lib/pg_query/deparse/interval.rb\r\n    if (this.MASKS == null) {\r\n      this.MASKS = {\r\n        0: 'RESERV',\r\n        1: 'MONTH',\r\n        2: 'YEAR',\r\n        3: 'DAY',\r\n        4: 'JULIAN',\r\n        5: 'TZ',\r\n        6: 'DTZ',\r\n        7: 'DYNTZ',\r\n        8: 'IGNORE_DTF',\r\n        9: 'AMPM',\r\n        10: 'HOUR',\r\n        11: 'MINUTE',\r\n        12: 'SECOND',\r\n        13: 'MILLISECOND',\r\n        14: 'MICROSECOND',\r\n        15: 'DOY',\r\n        16: 'DOW',\r\n        17: 'UNITS',\r\n        18: 'ADBC',\r\n        19: 'AGO',\r\n        20: 'ABS_BEFORE',\r\n        21: 'ABS_AFTER',\r\n        22: 'ISODATE',\r\n        23: 'ISOTIME',\r\n        24: 'WEEK',\r\n        25: 'DECADE',\r\n        26: 'CENTURY',\r\n        27: 'MILLENNIUM',\r\n        28: 'DTZMOD'\r\n      };\r\n    }\r\n\r\n    if (this.BITS == null) {\r\n      this.BITS = _.invert(this.MASKS);\r\n    }\r\n\r\n    if (this.INTERVALS == null) {\r\n      this.INTERVALS = {};\r\n      this.INTERVALS[(1 << this.BITS.YEAR)] = [ 'year' ];\r\n      this.INTERVALS[(1 << this.BITS.MONTH)] = [ 'month' ];\r\n      this.INTERVALS[(1 << this.BITS.DAY)] = [ 'day' ];\r\n      this.INTERVALS[(1 << this.BITS.HOUR)] = [ 'hour' ];\r\n      this.INTERVALS[(1 << this.BITS.MINUTE)] = [ 'minute' ];\r\n      this.INTERVALS[(1 << this.BITS.SECOND)] = [ 'second' ];\r\n      this.INTERVALS[(1 << this.BITS.YEAR | 1 << this.BITS.MONTH)] = [ 'year', 'month' ];\r\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR)] = [ 'day', 'hour' ];\r\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR | 1 << this.BITS.MINUTE)] = [ 'day', 'minute' ];\r\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR | 1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'day', 'second' ];\r\n      this.INTERVALS[(1 << this.BITS.HOUR | 1 << this.BITS.MINUTE)] = [ 'hour', 'minute' ];\r\n      this.INTERVALS[(1 << this.BITS.HOUR | 1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'hour', 'second' ];\r\n      this.INTERVALS[(1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'minute', 'second' ];\r\n\r\n      // utils/timestamp.h\r\n      // #define INTERVAL_FULL_RANGE (0x7FFF)\r\n      this.INTERVALS[this.INTERVAL_FULL_RANGE = '32767'] = [];\r\n    }\r\n\r\n    return this.INTERVALS[mask.toString()];\r\n  }\r\n}\r\n"]}